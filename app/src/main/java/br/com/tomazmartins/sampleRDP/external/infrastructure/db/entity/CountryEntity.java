package br.com.tomazmartins.sampleRDP.external.infrastructure.db.entity;


import io.requery.CascadeAction;
import io.requery.Entity;
import io.requery.ForeignKey;
import io.requery.Generated;
import io.requery.Key;
import io.requery.OneToOne;
import io.requery.Persistable;
import io.requery.Table;

/*
* ENTITY:
*   The annotation ENTITY is used to declare that
*   this abstract class is an entity which must be
*   mapped by the Requery.
*
*   The attribute NAME in this annotation declare
*   the name of the concrete class generated by
*   Requery that extends this abstract class.
*
* TABLE:
*   The annotation TABLE is used to declare the name
*   of the table in database associated with this entity.
* */
@Entity( name = "CountryEntityImpl" )
@Table( name = "Country" )
public abstract class CountryEntity implements Persistable {
    /*
    * ABSTRACT CLASS or INTERFACE?
    *    Requery allow us to use abstract classes or
    *    interfaces to define our entities.
    *
    *    In this example, we use abstract classes.
    *    Why?
    *    Because it is the way that I found to use
    *    Requery allied with MapStruct (generator of Mappers).
    *    I use that two frameworks because I want to
    *    develop a example of Repository Design Pattern
    *    and
    *    MVP (Model-View-Presenter).
    *
    *    With abstract classes we can implement methods
    *    and allow access of the MapStruct to the entities
    *    that it will map.
    * */

    /*
    * KEY:
    *   The attribute ID is the Primary Key.
    *
    * GENERATED:
    *   The attribute ID is auto incremented.
    * */
    @Key
    @Generated
    protected int id;

    /*
    * ONE-TO-ONE:
    *   The relationship between PRESIDENT and COUNTRY
    *   is one-to-one, because a COUNTRY must has only
    *   one PRESIDENT
    *   and
    *   a PRESIDENT is the PRESIDENT
    *   of only one COUNTRY.
    *
    *   The attribute CASCADE, in this annotation, define
    *   the behaviour of the Requery when the entity is
    *   saved. For default, when we insert an entity in
    *   database, Requery insert too an entity of the type
    *   associated with that.
    *   For example: in this case, when we insert a country,
    *   Requery will insert a president too, associated with
    *   the country.
    *   With the attribute CASCADE we can control this behaviour.
    *   In this case, we use *CascadeAction.NONE*. This value
    *   'turn off' the cascade behaviour.
    *
    * FOREIGN KEY:
    *   The Foreign Key was put in here, because
    *   the entity (Table) COUNTRY 'need' a
    *   PRESIDENT.
    *
    *   The dependence is between COUNTRY -> PRESIDENT,
    *   not PRESIDENT -> COUNTRY.
    *
    *   So, The Foreign Key is put in the dependent
    *   table. In this case, the 'COUNTRY'.
    * */
    @OneToOne( cascade = CascadeAction.NONE )
    @ForeignKey
    protected PresidentEntity president;

    protected int population;
    protected String name;

    /*
    * GETTERS and SETTERS:
    *   It's necessary to implement manually in here
    *   to allow access of it for MapStruct.
    * */

    public PresidentEntity getPresident() {
        return this.president;
    }

    public int getPopulation() {
        return this.population;
    }

    public String getName() {
        return this.name;
    }

    public int getId() {
        return this.id;
    }

    public void setPresident( PresidentEntity president ) {
        this.president = president;
    }

    public void setPopulation( int population ) {
        this.population = population;
    }

    public void setName( String name ) {
        this.name = name;
    }

    public void setId( int id ) {
        this.id = id;
    }
}
