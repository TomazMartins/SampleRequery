package br.com.tomazmartins.sampleRDP.external.infrastructure.db.mapper.requeryMapper;


import br.com.tomazmartins.sampleRDP.external.infrastructure.db.entity.CountryEntity;
import br.com.tomazmartins.sampleRDP.external.infrastructure.db.entity.CountryEntityImpl;
import br.com.tomazmartins.sampleRDP.external.infrastructure.db.entity.PresidentEntity;
import br.com.tomazmartins.sampleRDP.external.infrastructure.db.entity.PresidentEntityImpl;
import br.com.tomazmartins.sampleRDP.external.infrastructure.db.entity.StateEntity;
import br.com.tomazmartins.sampleRDP.external.infrastructure.db.entity.StateEntityImpl;

public class EntityFactory {
    /*
    * ENTITY FACTORY:
    *   This factory class is necessary, because we are
    *   working with Requery and MapStruct.
    *
    *   When MapStruct generate the mappers it needs to know
    *   the classes to instance them. When we uses Requery
    *   we expect that Requery generate some concrete classes,
    *   based in interfaces/abstract classes that we define.
    *
    *   So, MapStruct doesn't know the concrete classes generated
    *   by Requery, only the interfaces/abstract classes. To solve
    *   this, we use this factory.
    *
    *   We implement methods that returns the concrete class,
    *   generated by Requery. In the mappers, we use some annotation
    *   to declare which class we want. So, MapStruct use this factory
    *   and the specific method that return what we want.
    * */

    public CountryEntity createCountryEntity() {
        return new CountryEntityImpl();
    }

    public PresidentEntity createPresidentEntity() {
        return new PresidentEntityImpl();
    }

    public StateEntity createStateEntity() {
        return new StateEntityImpl();
    }
}
