package br.com.tomazmartins.sampleRDP.external.infrastructure.db.entity;

import io.requery.Entity;
import io.requery.Generated;
import io.requery.Key;
import io.requery.ManyToOne;
import io.requery.Persistable;
import io.requery.Table;

/*
* ENTITY:
*   The annotation ENTITY is used to declare that
*   this abstract class is an entity which must be
*   mapped by the Requery.
*
*   The attribute NAME in this annotation declare
*   the name of the concrete class generated by
*   Requery that extends this abstract class.
*
* TABLE:
*   The annotation TABLE is used to declare the name
*   of the table in database associated with this entity.
* */
@Table( name = "State" )
@Entity( name = "StateEntityImpl" )
public abstract class StateEntity implements Persistable {
    /*
    * ABSTRACT CLASS or INTERFACE?
    *    Requery allow us to use abstract classes or
    *    interfaces to define our entities.
    *
    *    In this example, we use abstract classes.
    *    Why?
    *    Because it is the way that I found to use
    *    Requery allied with MapStruct (generator of Mappers).
    *    I use that two frameworks because I want to
    *    develop a example of Repository Design Pattern
    *    and
    *    MVP (Model-View-Presenter).
    *
    *    With abstract classes we can implement methods
    *    and allow access of the MapStruct to the entities
    *    that it will map.
    * */

    /*
    * KEY:
    *   The attribute ID is the Primary Key.
    *
    * GENERATED:
    *   The attribute ID is auto incremented.
    * */
    @Key
    @Generated
    protected int id;

    @ManyToOne
    protected CountryEntity country;

    protected String name;

    /*
    * GETTERS and SETTERS:
    *   It's necessary to implement manually in here
    *   to allow access of it for MapStruct.
    * */

    public int getId() {
        return id;
    }

    public void setId( int id ) {
        this.id = id;
    }

    public CountryEntity getCountry() {
        return country;
    }

    public void setCountry( CountryEntity country ) {
        this.country = country;
    }

    public String getName() {
        return name;
    }

    public void setName( String name ) {
        this.name = name;
    }
}
